// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/18/2018 19:24:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_sample_tst(
	clock,
	giris_1,
	giris_2,
	s_giris,
	sampler_tx
);
input  clock;
input [3:0] giris_1;
input [3:0] giris_2;
input [3:0] s_giris;
output sampler_tx;

reg sample;
time current_time;
always @(clock or giris_1 or giris_2 or s_giris)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_vlg_check_tst (
	alu_cikis,
	cikis_elde,
	sampler_rx
);
input [3:0] alu_cikis;
input  cikis_elde;
input sampler_rx;

reg [3:0] alu_cikis_expected;
reg  cikis_elde_expected;

reg [3:0] alu_cikis_prev;
reg  cikis_elde_prev;

reg [3:0] alu_cikis_expected_prev;
reg  cikis_elde_expected_prev;

reg [3:0] last_alu_cikis_exp;
reg  last_cikis_elde_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_cikis_prev = alu_cikis;
	cikis_elde_prev = cikis_elde;
end

// update expected /o prevs

always @(trigger)
begin
	alu_cikis_expected_prev = alu_cikis_expected;
	cikis_elde_expected_prev = cikis_elde_expected;
end


// expected alu_cikis[ 3 ]
initial
begin
	alu_cikis_expected[3] = 1'bX;
end 
// expected alu_cikis[ 2 ]
initial
begin
	alu_cikis_expected[2] = 1'bX;
end 
// expected alu_cikis[ 1 ]
initial
begin
	alu_cikis_expected[1] = 1'bX;
end 
// expected alu_cikis[ 0 ]
initial
begin
	alu_cikis_expected[0] = 1'bX;
end 

// expected cikis_elde
initial
begin
	cikis_elde_expected = 1'bX;
end 
// generate trigger
always @(alu_cikis_expected or alu_cikis or cikis_elde_expected or cikis_elde)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_cikis = %b | expected cikis_elde = %b | ",alu_cikis_expected_prev,cikis_elde_expected_prev);
	$display("| real alu_cikis = %b | real cikis_elde = %b | ",alu_cikis_prev,cikis_elde_prev);
`endif
	if (
		( alu_cikis_expected_prev[0] !== 1'bx ) && ( alu_cikis_prev[0] !== alu_cikis_expected_prev[0] )
		&& ((alu_cikis_expected_prev[0] !== last_alu_cikis_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_cikis[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_cikis_expected_prev);
		$display ("     Real value = %b", alu_cikis_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_cikis_exp[0] = alu_cikis_expected_prev[0];
	end
	if (
		( alu_cikis_expected_prev[1] !== 1'bx ) && ( alu_cikis_prev[1] !== alu_cikis_expected_prev[1] )
		&& ((alu_cikis_expected_prev[1] !== last_alu_cikis_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_cikis[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_cikis_expected_prev);
		$display ("     Real value = %b", alu_cikis_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_cikis_exp[1] = alu_cikis_expected_prev[1];
	end
	if (
		( alu_cikis_expected_prev[2] !== 1'bx ) && ( alu_cikis_prev[2] !== alu_cikis_expected_prev[2] )
		&& ((alu_cikis_expected_prev[2] !== last_alu_cikis_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_cikis[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_cikis_expected_prev);
		$display ("     Real value = %b", alu_cikis_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_cikis_exp[2] = alu_cikis_expected_prev[2];
	end
	if (
		( alu_cikis_expected_prev[3] !== 1'bx ) && ( alu_cikis_prev[3] !== alu_cikis_expected_prev[3] )
		&& ((alu_cikis_expected_prev[3] !== last_alu_cikis_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_cikis[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_cikis_expected_prev);
		$display ("     Real value = %b", alu_cikis_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_cikis_exp[3] = alu_cikis_expected_prev[3];
	end
	if (
		( cikis_elde_expected_prev !== 1'bx ) && ( cikis_elde_prev !== cikis_elde_expected_prev )
		&& ((cikis_elde_expected_prev !== last_cikis_elde_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikis_elde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikis_elde_expected_prev);
		$display ("     Real value = %b", cikis_elde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikis_elde_exp = cikis_elde_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [3:0] giris_1;
reg [3:0] giris_2;
reg [3:0] s_giris;
// wires                                               
wire [3:0] alu_cikis;
wire cikis_elde;

wire sampler;                             

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.alu_cikis(alu_cikis),
	.cikis_elde(cikis_elde),
	.clock(clock),
	.giris_1(giris_1),
	.giris_2(giris_2),
	.s_giris(s_giris)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 
// giris_1[ 3 ]
initial
begin
	giris_1[3] = 1'b1;
end 
// giris_1[ 2 ]
initial
begin
	giris_1[2] = 1'b0;
end 
// giris_1[ 1 ]
initial
begin
	giris_1[1] = 1'b0;
end 
// giris_1[ 0 ]
initial
begin
	giris_1[0] = 1'b1;
end 
// giris_2[ 3 ]
initial
begin
	giris_2[3] = 1'b0;
end 
// giris_2[ 2 ]
initial
begin
	giris_2[2] = 1'b1;
end 
// giris_2[ 1 ]
initial
begin
	giris_2[1] = 1'b0;
end 
// giris_2[ 0 ]
initial
begin
	giris_2[0] = 1'b0;
end 
// s_giris[ 3 ]
initial
begin
	s_giris[3] = 1'b0;
end 
// s_giris[ 2 ]
initial
begin
	s_giris[2] = 1'b0;
end 
// s_giris[ 1 ]
initial
begin
	s_giris[1] = 1'b0;
end 
// s_giris[ 0 ]
initial
begin
	s_giris[0] = 1'b1;
end 

ALU_vlg_sample_tst tb_sample (
	.clock(clock),
	.giris_1(giris_1),
	.giris_2(giris_2),
	.s_giris(s_giris),
	.sampler_tx(sampler)
);

ALU_vlg_check_tst tb_out(
	.alu_cikis(alu_cikis),
	.cikis_elde(cikis_elde),
	.sampler_rx(sampler)
);
endmodule

